FROM node:20-alpine AS base
RUN apk update
RUN apk add --no-cache libc6-compat
RUN apk add openssl

# Install corepack and enable pnpm
ENV PNPM_HOME="/pnpm"
ENV PATH="$PNPM_HOME:$PATH"
RUN corepack enable
RUN corepack prepare pnpm@latest --activate

# The web Dockerfile is copy-pasted into our main docs at /docs/handbook/deploying-with-docker.
# Make sure you update this Dockerfile, the Dockerfile in the web workspace and copy that over to Dockerfile in the docs.

FROM base AS builder
# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.

# Set working directory
WORKDIR /app
COPY package.json pnpm-lock.yaml ./
RUN pnpm add turbo -g
COPY . .

RUN turbo prune @nbun/web --docker
RUN turbo telemetry disable

# Add lockfile and package.json's of isolated subworkspace
FROM base AS installer
RUN apk update
RUN apk add --no-cache libc6-compat

# Install corepack and enable pnpm
RUN corepack enable
RUN corepack prepare pnpm@latest --activate

WORKDIR /app

# First install dependencies (as they change less often)
COPY --from=builder /app/out/json/ .
RUN pnpm install

# Build the project and its dependencies
COPY --from=builder /app/out/full/ .
COPY --from=builder /app/.env.production .env
ENV TURBO_TELEMETRY_DISABLED=1
RUN npx next telemetry disable
ENV NODE_ENV=production
RUN npx update-browserslist-db@latest
RUN pnpm build --filter=@nbun/web...
 
FROM base AS runner
WORKDIR /app
 
# Don't run production as root
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs
USER nextjs
 
# Automatically leverage output traces to reduce image size
# https://nextjs.org/docs/advanced-features/output-file-tracing
COPY --from=installer --chown=nextjs:nodejs /app/apps/web/.next/standalone ./
COPY --from=installer --chown=nextjs:nodejs /app/apps/web/.next/static ./apps/web/.next/static
COPY --from=installer --chown=nextjs:nodejs /app/apps/web/public ./apps/web/public
 
EXPOSE 3000

CMD node apps/web/server.js
